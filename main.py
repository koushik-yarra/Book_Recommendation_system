# -*- coding: utf-8 -*-
"""Book_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xrM812rMOib85dON6ErRPH0WVDIxAa9D
"""

import numpy as np
import pandas as pd

books=pd.read_csv('Books.csv')
users=pd.read_csv('Users.csv')
ratings=pd.read_csv('Ratings.csv')

books.head(1)

users.head(1)

ratings.head(1)

print(users.shape)
print(ratings.shape)
print(books.shape)

books.isnull().sum()

users.isnull().sum()

ratings.isnull().sum()

print(books.duplicated().sum())
print(users.duplicated().sum())
print(ratings.duplicated().sum())



"""Popularity Based Recommendation System

"""

ratings_and_books=ratings.merge(books,on='ISBN')

num_rating_df=ratings_and_books.groupby('Book-Title').count()['Book-Rating'].reset_index()
num_rating_df.rename(columns={'Book-Rating':'num_ratings'},inplace=True)
num_rating_df

# Convert 'Book-Rating' column to numeric, handling errors
ratings_and_books['Book-Rating'] = pd.to_numeric(ratings_and_books['Book-Rating'], errors='coerce')

# Now calculate the average rating
avg_rating_df = ratings_and_books.groupby('Book-Title')['Book-Rating'].mean().reset_index()
avg_rating_df.rename(columns={'Book-Rating': 'avg_ratings'}, inplace=True)
avg_rating_df

popular_df=num_rating_df.merge(avg_rating_df,on='Book-Title')
popular_df

popular_df=popular_df[popular_df['num_ratings']>=250].sort_values(by='avg_ratings',ascending=False).head(50)

popular_df = popular_df.merge(books, on='Book-Title').drop_duplicates('Book-Title')[['Book-Title', 'Book-Author', 'Image-URL-M', 'num_ratings', 'avg_ratings']]

popular_df.head(1)

"""Collaborative Based Recommendation System"""

ratings_and_books

x=ratings_and_books.groupby('User-ID').count()['Book-Rating']>200
readed_users=x[x].index

filtered_rating=ratings_and_books[ratings_and_books['User-ID'].isin(readed_users)]

y=filtered_rating.groupby('Book-Title').count()['Book-Rating']>=50
famous_book=y[y].index

final_ratings=filtered_rating[filtered_rating['Book-Title'].isin(famous_book)]

final_ratings.duplicated().sum()

pt=final_ratings.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')

pt.fillna(0,inplace=True)

pt

from sklearn.metrics.pairwise import cosine_similarity

sim_score=cosine_similarity(pt)

sim_score.shape

def recommend(book_name):
  index=np.where(pt.index==book_name)[0][0]
  similar_items=sorted(list(enumerate(sim_score[index])),key=lambda x:x[1],reverse=True)[1:6]
  data=[]
  for i in similar_items:
    print(pt.index[i[0]])

recommend('1984')

